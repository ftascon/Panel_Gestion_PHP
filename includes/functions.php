<?php/* *  *  profile y demás *  Thumbs 300px x 300px;  *   *///require_once 'general_settings.php';/* GE */function date_db_format($date, $invers = false) {    /*  only to daterange format MM/DD/AAAA   *///    echo $date . '<br>';    if (!$invers) {        $f_init = explode('/', $date);        if (count($f_init) > 1) {            return $f_init[2] . '-' . $f_init[0] . '-' . $f_init[1];        } else {            $g_init = explode('-', $date);            return $g_init[2] . '-' . $g_init[0] . '-' . $g_init[1];        }    } else {        $g_init = explode('-', $date);        return $g_init[1] . '/' . $g_init[2] . '/' . $g_init[0];    }}/* ----- */function getYearsMonths() {    $months = array(        'enero',        'febrero',        'marzo',        'abril',        'mayo',        'junio',        'julio',        'agosto',        'septiembre',        'octubre',        'noviembre',        'diciembre'    );    $lastYear = date("Y");    $years = array();    $i = 2014;    while ($i <= $lastYear) {        $years[] = $i;        $i++;    }    $all["A"] = $years;    $all["M"] = $months;    return $all;}/* ----- */function get_url_vicos($name) {    /*     * la consulat de las vc debe estar ordenada por fecha,      * el campo prefix_vc_modulos, en la tabla modulos      * provee el nombre de la vc     */    return 'https://gestorenergetico.clickmeeting.com/' . $name;}/* ----- */function parse_size($size) {    $unit = preg_replace('/[^bkmgtpezy]/i', '', $size); // Remove the non-unit characters from the size.    $size = preg_replace('/[^0-9\.]/', '', $size); // Remove the non-numeric characters from the size.    if ($unit) {// Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.        return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));    } else {        return round($size);    }}function get_simple_date($date = false, $explode = false, $format = false) {    //dma por defecto    // formatos separados por "-"    $meses_min = array(        1 => "ene",        2 => "feb",        3 => "mar",        4 => "abr",        5 => "may",        6 => "jun",        7 => "jul",        8 => "ago",        9 => "sep",        10 => "oct",        11 => "nov",        12 => "dic"    );    $d = 0;    $m = 0;    $a = 0;    if (!$date) {        $d = date("d");        $m = date("n");        $a = date("Y");    } else {        if (!$explodes) {            $explode = "-";        }        $date = explode($explode, $date);        if ($format) {            $format = explode("-", $format);            $format = array_flip($format);            $d = $date[$format["d"]];            $m = $date[$format["m"]];            $a = $date[$format["a"]];        } else {            $d = $date[0];            $m = $date[1];            $a = $date[2];        }    }    return $d . "-" . $meses_min[$m] . "-" . $a;}function human_cols($t, $c) {    if ($t = "people") {        switch ($c) {            case 'email_people':                return 'Email Principal';                break;            case 'address_people':                return 'Dirección';                break;            case 'phone_people':                return 'Teléfono Principal';                break;            case 'postal_code':                return 'Código Postal';                break;            case 'email_people2':                return 'Email secundario';                break;            case 'phone_people2':                return 'Teléfono secundario';                break;            case 'fk_reside_people':                return 'Residencia';                break;            case 'nacionalidad':                return 'Nacionalidad';                break;            case 'f_nacimiento':                return 'Fecha de Nacimiento';                break;            case 'country':                return 'Pais';                break;            case 'profesion':                return 'Profesión';                break;            case 'estado':                return 'Estado';                break;            case 'apodo':                return 'Apodo';                break;            case 'fname_people':                return 'Nombre';                break;            case 'lname1_people':                return 'Primer apellido';                break;            case 'comment_people':                return 'Comentario personal';                break;            case 'lname2_people':                return 'Segundo apellido';                break;            case 'comment_service':                return 'Comentario sobre el servicio';                break;            case 'city':                return 'Ciudad';                break;            /* campos precindibles */            case 'rol':            case 'fk_city_people':            case 'fk_country_people':            case 'fk_type_people':            case 'lname2_people':            case 'id_people':            case 'photo_people':                return false;                break;            default:                break;        }    } else {        return false;    }}function time_left($date, $time) {    date_default_timezone_set('Europe/Andorra');    $now = new DateTime();    $future_date = new DateTime($date . " " . $time . ":00");    $interval = $future_date->diff($now);//    return $now->format("Y-m-d H:i") . "<br>" . $future_date->format("Y-m-d H:i") . "<br>" . dateDiff($now->format("Y-m-d H:i"), $future_date->format("Y-m-d H:i"));    $res = dateDiff($now->format("Y-m-d H:i"), $future_date->format("Y-m-d H:i"));    if (!$res) {        return '<span style="display:block;font-style:italic;">Videoconferencia realizada</span>' . $future_date->format("d-m-Y");    }    return '<span style="display:block;font-style:italic;">Faltan</span>' . $res;}// Set timezonedate_default_timezone_set("UTC");// Time format is UNIX timestamp or// PHP strtotime compatible stringsfunction dateDiff($time1, $time2, $precision = 6) {// If not numeric then convert texts to unix timestamps    if (!is_int($time1)) {        $time1 = strtotime($time1);    }    if (!is_int($time2)) {        $time2 = strtotime($time2);    }// If time1 is bigger than time2// Then swap time1 and time2    if ($time1 > $time2) {        return false;        $ttime = $time1;        $time1 = $time2;        $time2 = $ttime;    }// Set up intervals and diffs arrays    $intervals = array('year', 'month', 'day', 'hour', 'minute', 'second');    $diffs = array();// Loop thru all intervals    foreach ($intervals as $interval) {// Create temp time from time1 and interval        $ttime = strtotime('+1 ' . $interval, $time1);// Set initial values        $add = 1;        $looped = 0;// Loop until temp time is smaller than time2        while ($time2 >= $ttime) {// Create new temp time from time1 and interval            $add++;            $ttime = strtotime("+" . $add . " " . $interval, $time1);            $looped++;        }        $time1 = strtotime("+" . $looped . " " . $interval, $time1);        $diffs[$interval] = $looped;    }    $count = 0;    $times = array();// Loop thru all diffs    foreach ($diffs as $interval => $value) {// Break if we have needed precission        if ($count >= $precision) {            break;        }// Add value and interval // if value is bigger than 0        if ($value > 0) {// Add s if value is not 1            if ($value != 1) {                $interval .= "s";            }// Add value and interval to times array            $times[] = $value . " " . $interval;            $count++;        }    }// Return string with times    return implode(", ", $times);}function get_image_people($src) {    $user_photo = BASE_URL . "images/profile/noimage.png";    if ((isset($src)) && (strlen($src) > 3)) {        $user_photo = BASE_URL . "images/profile/" . $src;    }    return $user_photo;}function get_image_aula($src, $arr = false) {    if ($arr) {        $aula_image['thumb'] = BASE_URL . "images/aulas/noimage.jpg";        $aula_image['normal'] = BASE_URL . "images/aulas/noimage.jpg";    } else {        $aula_image = BASE_URL . "images/aulas/noimage.jpg";    }    if ((isset($src)) && (strlen($src) > 3)) {        if ($arr) {            $aula_image['thumb'] = BASE_URL . "images/aulas/thumbs/" . $src;            $aula_image['normal'] = BASE_URL . "images/aulas/" . $src;        } else {            $aula_image = BASE_URL . "images/aulas/" . $src;        }    }    return $aula_image;}function get_image_noticias($src) {    $noticias_image = BASE_URL . "images/noticias/noimage.jpg";    if ((isset($src)) && (strlen($src) > 3)) {        $noticias_image = BASE_URL . "images/noticias/" . $src;    }    return $noticias_image;}function get_profile_image_by_image($img) {    if (isset($img) && strlen($img)) {        $user_photo["full"] = "images/profile/" . $img;        $user_photo["thumb"] = "images/profile/thumbs/" . $img;    } else {        $user_photo["full"] = BASE_URL . "images/profile/noimage.png";        $user_photo["thumb"] = BASE_URL . "images/profile/noimage.png";    }    return $user_photo;}function get_profile_image() {    if ((isset($_SESSION["user_data"]["photo"])) && (strlen($_SESSION["user_data"]["photo"]) > 3)) {        $user_photo = "images/profile/" . $_SESSION["user_data"]["photo"];    } else {        $user_photo = "images/profile/noimage.png";    }    return BASE_URL . $user_photo;}function get_date_format($date, $op = false, $explode = "-") {    if ($op == 'examenes') {        return str_replace("-", "/", $date);    }    date_default_timezone_get("Europe/Madrid");    $dias = array(        "Monday" => "Lunes",        "Tuesday" => "Martes",        "Wednesday" => "Miércoles",        "Thursday" => "Jueves",        "Friday" => "Viernes",        "Saturday" => "Sábado",        "Sunday" => "Domingo"    );    $meses = array(        0 => "Enero",        1 => "Febrero",        2 => "Marzo",        3 => "Abril",        4 => "Mayo",        5 => "Junio",        6 => "Julio",        7 => "Agosto",        8 => "Septiembre",        9 => "Octubre",        10 => "Noviembre",        11 => "Diciembre"    );    $meses_low = array(        0 => "enero",        1 => "febrero",        2 => "marzo",        3 => "abril",        4 => "mayo",        5 => "junio",        6 => "julio",        7 => "agosto",        8 => "septiembre",        9 => "octubre",        10 => "noviembre",        11 => "diciembre"    );    $meses_min = array(        0 => "ene",        1 => "feb",        2 => "mar",        3 => "abr",        4 => "may",        5 => "jun",        6 => "jul",        7 => "ago",        8 => "sep",        9 => "oct",        10 => "nov",        11 => "dic"    );    $ctm_date = $date;    if ($op) {        if ($explode == '-') {            $ctm_date = explode("-", $ctm_date);        } else {            $ctm_date = explode($explode, $ctm_date);        }        if ($op == 'vicos') {            return $ctm_date[0] . "/" . intval($ctm_date[1], 10) . "/" . $ctm_date[2];        } else {            if ($op == 'min') {                return $ctm_date[2] . "-" . $meses_min[intval($ctm_date[0], 10) - 1] . "-" . $ctm_date[1];            } else {                if ($op == 'lista_noticias') {//                    print_r($ctm_date);                    return intval($ctm_date[1], 10) . " de " . $meses[intval($ctm_date[0], 10) - 1];                } else {                    $f_date_i = gmdate("D,m,Y", strtotime($ctm_date[1] . "/" . $ctm_date[0] . "/" . $ctm_date[2]));                }            }        }    } else {        $ctm_date = explode("/", $ctm_date);        $f_date_i = gmdate("d,D,m,Y", strtotime($ctm_date[1] . "/" . $ctm_date[0] . "/" . $ctm_date[2]));    }//    $ctm_date = date_format(new DateTime($ctm_date[1] . "/" . $ctm_date[0] . "/" . $ctm_date[2], 'w ,d ,m ,Y ');//    print_r($ctm_date);    $hidden = $ctm_date[2] . $ctm_date[1] . $ctm_date[0];    $f_date_i = explode(",", $f_date_i);//    print_r($ctm_date);    $current_mes = $meses[$ctm_date[0] - 1];    $current_dia = $ctm_date[1];    $current_anio = $ctm_date[2];    $hidden = "<!--$hidden-->";    return $hidden . $current_dia . " de " . $current_mes . ", " . $current_anio;//     date($format);}/* /GE *//* ctm translate */function translate($key) {    if (isset($_SESSION["content_lang"][$key])) {        return $_SESSION["content_lang"][$key];    } else {        return $key;    }}/* tiempo */$tiempos = array();$GLOBALS["tiempos"] = $tiempos;function timer($state = false, $place = false) {    if ($state == "str") {        $it = microtime(true);        $GLOBALS["tiempos"]["$place"] = $it;    } else {        if ($state == "stp") {            $st = microtime(true);            $it = $GLOBALS["tiempos"]["$place"];            $tt = ($st - $it);            $GLOBALS["tiempos"]["$place"] = $tt;        } else {            if ($state == "tt") {                $tiempos = $GLOBALS["tiempos"];                $suma_total = 0;                foreach ($tiempos as $sumaid => $suma_valor) {                    if (strpos($sumaid, "$place")) {                        $suma_total += $suma_valor;                    }                }                return $suma_total;            }        }    }}/* ctm films_url */function generate_url_translations() {    $id_object = $GLOBALS["page_details"]["id_object"];    $type_url = '';    $data_url = array();    if ($id_object != '') {        switch ($GLOBALS["page_details"]["type"]) {            case "standard":                $translation = '';                if (array_key_exists($id_object, $_SESSION["content_lang"])) {                    $translation = array_search($id_object, $_SESSION["content_lang"]) . "/";                }                foreach ($GLOBALS["langs_ids"] as $k => $v) {                    $data_url[$k] = BASE_URL . $k . "/" . $translation;                }                return $data_url;                break;            case "movies":                $movies_data = new MoviesTrans();                $data_url_temp = $movies_data->get_movies_url_translation($id_object);                $type_url .= $_SESSION["content_lang"]["URL_MOVIES"] . "/";                break;            case "movies-list":                $data_url_temp .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_MOVIES_LIST"] : $_SESSION["content_lang"]["URL_MOVIES_LIST"] . "/" . $id_object;                break;            case "countries-list":                $data_url_temp .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_COUNTRIES_LIST"] : $_SESSION["content_lang"]["URL_COUNTRIES_LIST"] . "/" . $id_object;                break;            case "cities-list":                $data_url_temp .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_CITIES_LIST"] : $_SESSION["content_lang"]["URL_CITIES_LIST"] . "/" . $id_object;                break;            case "locations-list":                $data_url_temp .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_LOCATIONS_LIST"] : $_SESSION["content_lang"]["URL_LOCATIONS_LIST"] . "/" . $id_object;                break;            case "countries":                $countries_data = new CountriesTrans();                $data_url_temp = $countries_data->get_countries_url_translations($id_object);                break;            case "cities":                $cities_data = new CitiesTrans();                $data_url_temp = $cities_data->get_cities_url_translation($id_object);                break;            case "locations":                $locations_data = new LocationsTrans();                $data_url_temp = $locations_data->get_locations_url_translation($id_object);                break;            case "profile":                break;            case "friends":                break;            case "actors":                break;            case "director":                break;            default:                break;        }        foreach ($data_url_temp as $url) {            if ($GLOBALS["page_details"]["type"] == "cities") {                $data_url[array_search($url["lang"], $GLOBALS["langs_ids"])] = BASE_URL . array_search($url["lang"], $GLOBALS["langs_ids"]) . "/" . $url["countries_url"] . "/" . $url["cities_url"];            } else if ($GLOBALS["page_details"]["type"] == "locations") {                $data_url[array_search($url["lang"], $GLOBALS["langs_ids"])] = BASE_URL . array_search($url["lang"], $GLOBALS["langs_ids"]) . "/" . $url["countries_url"] . "/" . $url["cities_url"] . "/" . $url["locations_url"] . "-l-" . $url["locations_id"];            } else {                $data_url[array_search($url["lang"], $GLOBALS["langs_ids"])] = BASE_URL . array_search($url["lang"], $GLOBALS["langs_ids"]) . "/" . $type_url . $url["url"];            }        }    }    return $data_url;}function generate_new_url($type, $name) {    switch ($type) {        case "movies":            $movies = new MoviesTrans();            $movies_check = $movies->url_exist($name);//            return $movies_check["num"];            if ($movies_check["num"] != 0) {                $url = strtourl($name) . "-" . ($movies_check["num"] + 1);            } else {                $url = strtourl($name);            }            return $url;            break;        default:            break;    }}function generate_url($type_url, $id_object = false) {    $final_url = BASE_URL . $_SESSION["lang_cod"] . "/";    if ($id_object != '') {        switch ($type_url) {            case "standard":                $final_url .= $_SESSION["content_lang"]["$id_object"];                break;            case "movies":                if (is_numeric($id_object)) {                    $movies = new MoviesTrans();                    $movies_url = $movies->get_movies_url($id_object);                    $id_object = $movies_url["movies_url"];                }                $final_url .= $_SESSION["content_lang"]["URL_MOVIES"] . "/" . $id_object;                break;            case "movies-list":                $final_url .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_MOVIES_LIST"] : $_SESSION["content_lang"]["URL_MOVIES_LIST"] . "/" . $id_object;                break;            case "countries-list":                $final_url .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_COUNTRIES_LIST"] : $_SESSION["content_lang"]["URL_COUNTRIES_LIST"] . "/" . $id_object;                break;            case "cities-list":                $final_url .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_CITIES_LIST"] : $_SESSION["content_lang"]["URL_CITIES_LIST"] . "/" . $id_object;                break;            case "locations-list":                $final_url .= ($id_object == 1) ? $_SESSION["content_lang"]["URL_LOCATIONS_LIST"] : $_SESSION["content_lang"]["URL_LOCATIONS_LIST"] . "/" . $id_object;                break;            case "countries":                $countries_data = new CountriesTrans();                $countries_url = $countries_data->get_countries_url($id_object);                $final_url .= $countries_url["countries_url"];                break;            case "cities":                $cities_data = new CitiesTrans();                $cities_url = $cities_data->get_cities_url($id_object);                $final_url .= $cities_url["countries_url"] . "/" . $cities_url["cities_url"];                break;            case "locations":                $locations_data = new LocationsTrans();                $locations_url = $locations_data->get_locations_url($id_object);                $final_url .= $locations_url["countries_url"] . "/" . $locations_url["cities_url"] . "/" . $locations_url["locations_url"] . "-l-" . $locations_url["locations_id"];                break;            case "profile":                break;            case "friends":                break;            case "actors":                break;            case "director":                break;            default:                break;        }        return $final_url . "/";    } else {        return $final_url;    }}function clean_url($url_bulk = false) {// Redirige la URL a URL en minusculas en caso de algo en mayusculas    if (preg_match('/[A-Z]/', $url_bulk)) {        header("HTTP/1.1 301 Moved Permanently");        header('Location: ' . BASE_URL . strtolower($url_bulk));    }// Separamos la URL por '/'    $GLOBALS['url'] = explode('/', $url_bulk);// Quitamos el Ãºltimo item de la URL en caso de que estÃ© vacio    if (end($GLOBALS['url']) == '') {        $last = array_pop($GLOBALS['url']);    }// Compruebo y seteo idiomas correctamente    if ($GLOBALS['url'][0] == PRIMARY_LANG) {// Si el idioma que recibo es el PRIMARY_LANG redirijo a la URL correcta        unset($GLOBALS['url'][0]);        $new_url = BASE_URL;        foreach ($GLOBALS['url'] as $u) {            $new_url .= $u . '/';        }        header("HTTP/1.1 301 Moved Permanently");        header('Location: ' . $new_url);    } elseif (array_key_exists($GLOBALS['url'][0], $GLOBALS['langs_ids'])) {// Si el idioma que recibo estÃ¡ en el array de idiomas        $GLOBALS['lang_set'] = $GLOBALS['url'][0];        unset($GLOBALS['url'][0]);    } else {// Si el idioma de la URL no estÃ¡ en el array de idiomas, presupongo que es el PRIMARY_LANG        $GLOBALS['lang_set'] = PRIMARY_LANG;    }// Reinicia indices del array    $GLOBALS["url"] = array_values($GLOBALS["url"]);    $_SESSION["lang_set"] = $GLOBALS["langs_ids"][$GLOBALS["lang_set"]];    $_SESSION["lang_cod"] = $GLOBALS["lang_set"];    require_once 'langs/' . $GLOBALS['lang_set'] . '.php';    return clean_section();}function clean_section() {    $result = array("exist" => false);    $data_url = $GLOBALS["url"];//    print_r($data_url);    switch (count($data_url)) {        case 0:            $result["exist"] = true;            $result["type"] = "standard";            $result["id_object"] = "home";            break;        case 1:            if (in_array($data_url[0], $_SESSION["content_lang"])) {//standards                $result["exist"] = true;                $result["type"] = $data_url[0];                switch ($data_url[0]) {                    case $_SESSION["content_lang"]["URL_MOVIES_LIST"]:                    case $_SESSION["content_lang"]["URL_COUNTRIES_LIST"]:                    case $_SESSION["content_lang"]["URL_CITIES_LIST"]:                    case $_SESSION["content_lang"]["URL_LOCATIONS_LIST"]:                        $result["id_object"] = 1;                        break;                }            } else {                if (count($data_url) == 1) {//movie                     if (strpos($data_url[0], "-f-")) {                        $validator = new MoviesTrans();                        $data_url = explode("-f-", $data_url[0]);                        $check = $validator->check_movies_url(trim($data_url[0]));                        if (($check["movies_url"] == $data_url[0]) && ($check["movies_old_id"] == $data_url[1])) {                            $result["exist"] = "1";                            header("HTTP/1.1 301 Moved Permanently");                            header('Location: ' . generate_url("movies", $check["movies_url"]));                        } else {                            $result["exist"] = false;                        }                        $result["type"] = "movies";                        $result["id_object"] = $data_url[count($data_url) - 1];                    } else {//country                        $validator = new CountriesTrans();                        $check = $validator->get_countries_url($data_url[0]);                        if ($check["countries_url"] == $data_url[0]) {                            $result["exist"] = "1";                        } else {                            $result["exist"] = false;                        }                        $result["type"] = "countries";                        $result["id_object"] = $check["countries_id"];                    }                }            }            break;        case 2:            switch ($data_url[0]) {                case "profile":                    $result["exist"] = true;                    $result["type"] = "profile";                    break;                case "actors":                    $result["exist"] = true;                    $result["type"] = "actors";                    break;                case "directors":                    $result["exist"] = true;                    $result["type"] = "directors";                    break;                case "movies":                    $movies_data = new MoviesTrans();                    $movies_url = $movies_data->get_movies_url($data_url[1]);                    if ($movies_url["movies_url"] == $data_url[1]) {                        $result["exist"] = true;                    }                    $result["type"] = "movies";                    $result["id_object"] = $movies_url["movies_id"];                    break;                case "movies-list":                    $items_by_page = 10;                    $movies_data = new Movies();                    $movies_limit = $movies_data->get_movies_total_count();                    $result["type"] = "movies-list";                    if (($data_url[1] <= round($movies_limit["count"] / $items_by_page)) && ($data_url[1] >= 1)) {                        if ($data_url[1] != 1) {                            $result["id_object"] = $data_url[1];                        } else {                            header("HTTP/1.1 301 Moved Permanently");                            header('Location: ' . generate_url("$data_url[0]", 1));                        }                        $result["exist"] = true;                    } else {                        $result["exist"] = false;                    }                    break;                case "countries-list":                    $items_by_page = 10;                    $countries_data = new Countries();                    $countries_limit = $countries_data->get_countries_total_count();                    $result["type"] = "countries-list";                    if (($data_url[1] <= round($countries_limit["count"] / $items_by_page)) && ($data_url[1] >= 1)) {                        if ($data_url[1] != 1) {                            $result["id_object"] = $data_url[1];                        } else {                            header("HTTP/1.1 301 Moved Permanently");                            header('Location: ' . generate_url("$data_url[0]", 1));                        }                        $result["exist"] = true;                    } else {                        $result["exist"] = false;                    }                    break;                case "cities-list":                    $items_by_page = 10;                    $cities_data = new Cities();                    $cities_limit = $cities_data->get_cities_total_count();                    $result["type"] = "cities-list";                    if (($data_url[1] <= round($cities_limit["count"] / $items_by_page)) && ($data_url[1] >= 1)) {                        if ($data_url[1] != 1) {                            $result["id_object"] = $data_url[1];                        } else {                            header("HTTP/1.1 301 Moved Permanently");                            header('Location: ' . generate_url("$data_url[0]", 1));                        }                        $result["exist"] = true;                    } else {                        $result["exist"] = false;                    }                    break;                case "locations-list":                    $items_by_page = 10;                    $locations_data = new Locations();                    $locations_limit = $locations_data->get_locations_total_count();                    $result["type"] = "locations-list";                    if (($data_url[1] <= round($locations_limit["count"] / $items_by_page)) && ($data_url[1] >= 1)) {                        if ($data_url[1] != 1) {                            $result["id_object"] = $data_url[1];                        } else {                            header("HTTP/1.1 301 Moved Permanently");                            header('Location: ' . generate_url("$data_url[0]", 1));                        }                        $result["exist"] = true;                    } else {                        $result["exist"] = false;                    }                    break;                default :                    $cities_data = new CitiesTrans();                    $cities_url = $cities_data->get_cities_url($data_url[1]);                    if (($cities_url["countries_url"] == $data_url[0])) {                        $result["exist"] = "1";                    } else {                        $result["exist"] = false;                    }                    $result["type"] = "cities";                    $result["id_object"] = $cities_url["cities_id"];                    break;            }            break;        case 3:            if ((count($data_url) == 3) && (strpos($data_url[2], "-l-"))) {                $url_parts = explode("-l-", $data_url[2]);                $locations_data = new LocationsTrans();                $locations_url = $locations_data->get_locations_url($url_parts[1]);                if (($locations_url["countries_url"] == $data_url[0]) && ($locations_url["cities_url"] == $data_url[1])) {                    $result["exist"] = "1";                } else {                    $result["exist"] = false;                }                $result["type"] = "locations";            }            $result["id_object"] = $url_parts[1];            break;        default :            $result["exist"] = false;            $result["type"] = "404";            $result["id_object"] = "404";            break;    }    return $result;}/* lo utilizamos */function ms_fridge($theString) {    if (strpos($theString, '"') === FALSE) {        $foo = EC2($theString);    } else {        $foo = EC($theString);    }    return $foo;}function EC($theString) {    $foo = "'" . $theString . "'";    return $foo;}function EC2($theString) {    $foo = '"' . $theString . '"';    return $foo;}function concatena($primera, $segona, $thechars) {    if ($primera) {        if ($segona) {            $tot = $primera . $thechars . $segona;        } else {            $tot = $primera;        }    } else {        if ($segona) {            $tot = $segona;        } else {            $tot = '';        }    }    return $tot;}function stripSpaces($theString) {    $nova = '';    for ($i = 0; $i < strlen($theString); $i++) {        $foo = substr($theString, $i, 1);        if ($foo == ' ') {            $nova .= '_';        } else {            $nova .= $foo;        }    }    return $nova;}function saveFile($name, $tmp_name, $uploads_dir = 'images/', $old_file = FALSE, $thumbnail_size = array(), $rename = TRUE) {    if ($name == '') {        return FALSE;    }    if ($thumbnail_size) {        $thumbnail_size = array(            'thumbs' => array(                'width' => '350',                'height' => '350',                'scale' => false            )        );    }//    echo '$name: ' . $name . DEBUG_ENTER;//    echo '$tmp_name: ' . $tmp_name . DEBUG_ENTER;//    echo '$uploads_dir: ' . $uploads_dir . DEBUG_ENTER;//    echo '$old_file: ' . $old_file . DEBUG_ENTER;//    echo '$thumbnail_size: ' . print_r($thumbnail_size) . DEBUG_ENTER;//    echo '$rename: ' . $rename . DEBUG_ENTER;//    die();//    echo BASE_PATH . $uploads_dir;//    if (!file_exists($uploads_dir)) {//        mkdir($uploads_dir);//    }    if ($old_file) {        @unlink($uploads_dir . $old_file);    }    $pathinfo = pathinfo($name);    if ($rename) {        $newname = 'file_' . str_replace('.', '', microtime(TRUE)) . '.' . $pathinfo['extension'];    } else {        $newname = $name;    }    $uploads_dir = BASE_PATH . $uploads_dir;    if (move_uploaded_file($tmp_name, $uploads_dir . $newname)) {        if (count($thumbnail_size) > 0 && $thumbnail_size != false) {            foreach ((array) $thumbnail_size as $subfolder => $thumb) {                if (!file_exists($uploads_dir . $subfolder)) {                    mkdir($uploads_dir . $subfolder);                }                if ($old_file) {                    @unlink($uploads_dir . $subfolder . '/' . $old_file);                }                switch ($pathinfo['extension']) {                    case 'jpg':                    case 'jpeg':                    case 'JPG':                    case 'JPEG':                        $image = imagecreatefromjpeg($uploads_dir . $newname);                        $thumb = resizingImage($image, $thumb['width'], $thumb['height'], $thumb['scale']);                        imagejpeg($thumb, $uploads_dir . $subfolder . '/' . $newname);                        break;                    case 'png':                    case 'PNG':                        $image = imagecreatefrompng($uploads_dir . $newname);                        $thumb = resizingImage($image, $thumb['width'], $thumb['height'], $thumb['scale'], $GLOBALS['png_background']);                        imagepng($thumb, $uploads_dir . $subfolder . '/' . $newname);                        break;                    case 'gif':                    case 'GIF':                        $image = imagecreatefromgif($uploads_dir . $newname);                        $thumb = resizingImage($image, $thumb['width'], $thumb['height'], $thumb['scale']);                        imagegif($thumb, $uploads_dir . $subfolder . '/' . $newname);                        break;                }            }        }        return $newname;    } else {        die('mal');        return false;    }}function resizingImage($image, $max_width, $max_height, $scale = true, $bgColour = '') {// get the current dimensions of the image    $src_width = imagesx($image);    $src_height = imagesy($image);// if either max_width or max_height are 0 or null then calculate it proportionally    if (!$max_width) {        $max_width = $src_width / ($src_height / $max_height);    } elseif (!$max_height) {        $max_height = $src_height / ($src_width / $max_width);    }// initialize some variables    $thumb_x = $thumb_y = 0; // offset into thumbination image// if scaling the image calculate the dest width and height    $dx = $src_width / $max_width;    $dy = $src_height / $max_height;    if ($scale == true) {        $d = max($dx, $dy);    }// otherwise assume cropping image    else {        $d = min($dx, $dy);    }    $new_width = $src_width / $d;    $new_height = $src_height / $d;// sanity check to make sure neither is zero    $new_width = max(1, $new_width);    $new_height = max(1, $new_height);    $thumb_width = min($max_width, $new_width);    $thumb_height = min($max_height, $new_height);// if bgColour is an array of rgb values, then we will always create a thumbnail image of exactly// max_width x max_height    if (is_array($bgColour)) {        $thumb_width = $max_width;        $thumb_height = $max_height;        $thumb_x = ($thumb_width - $new_width) / 2;        $thumb_y = ($thumb_height - $new_height) / 2;    } else {        $thumb_x = ($thumb_width - $new_width) / 2;        $thumb_y = ($thumb_height - $new_height) / 2;    }// create a new image to hold the thumbnail    $thumb = imagecreatetruecolor($thumb_width, $thumb_height);    if (is_array($bgColour)) {        $bg = imagecolorallocate($thumb, $bgColour[0], $bgColour[1], $bgColour[2]);        imagefill($thumb, 0, 0, $bg);    }// copy from the source to the thumbnail    imagecopyresampled($thumb, $image, $thumb_x, $thumb_y, 0, 0, $new_width, $new_height, $src_width, $src_height);    return $thumb;}function multi_array_key_exists($needle = '', $haystack = array()) {    foreach ((array) $haystack as $key => $value) {        if (strval($needle) == strval($key)) {            return true;        }        if (is_array($value)) {            if (multi_array_key_exists($needle, $value) === true) {                return $key;            }        } else {            continue;        }    }    return false;}function array_intval_pos($needle, $haystack) {    $count = 0;    foreach ((array) $haystack as $key => $value) {        if ($key == $needle) {            return $count;        }        $count++;    }    return false;}function clone_folder($src, $dst) {    $dir = opendir($src);    @mkdir($dst);    while (false !== ( $file = readdir($dir))) {        if (( $file != '.' ) && ( $file != '..' )) {            if (is_dir($src . '/' . $file)) {                recurse_copy($src . '/' . $file, $dst . '/' . $file);            } else {                copy($src . '/' . $file, $dst . '/' . $file);            }        }    }    closedir($dir);}function getRandomPwd() {    $password = '';    for ($i = 1; $i <= 8; $i++) {        $type = rand(1, 3);        switch ($type) {            case '1':                $password .=chr(rand(48, 57));                break;            case '2':                $password .=chr(rand(65, 90));                break;            case '3':                $password .=chr(rand(97, 122));                break;        }    }    return $password;}function getCaptcha($number1, $number2 = 0, $separator = '', $imput_id = 'codigo') {    if ($number2 == 0) {        $image = '<label for="' . $imput_id . '"><img id="siimage" src="' . BASE_URL . 'includes/captcha/securimage_show.php?length=' . $number1 . '&sid=' . md5(time()) . '" /></label>';    } else {        $image = '<label for="' . $imput_id . '"><img id="siimage" src="' . BASE_URL . 'includes/captcha/securimage_show.php?rand1=' . $number1 . '&rand2=' . $number2 . '&sid=' . md5(time()) . '" /></label>';    }    /* $output .= '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="19" height="19" id="SecurImage_as3" align="middle">      <param name="allowScriptAccess" value="sameDomain"/>      <param name="allowFullScreen" value="false"/>      <param name="movie" value="includes/captcha/securimage_play.swf?audio=includes/captcha/securimage_play.php&bgColor1=#777&bgColor2=#fff&iconColor=#000&roundedCorner=5" />      <param name="quality" value="high"/>      <param name="bgcolor" value="#ffffff"/>      <embed src="includes/captcha/securimage_play.swf?audio=captcha/securimage_play.php&bgColor1=#777&bgColor2=#fff&iconColor=#000&roundedCorner=5" quality="high" bgcolor="#ffffff" width="19" height="19" name="SecurImage_as3" align="middle" allowScriptAccess="sameDomain" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />      </object><br/>'. */    if ($number2 == 0) {        $refresh = '<a href="" title="Cambiar im&aacute;gen" alt="Cambiar im&aacute;gen" onclick="document.getElementById(\'siimage\').src = \'' . BASE_URL . 'includes/captcha/securimage_show.php?length=' . $number1 . '&sid=\' + Math.random(); return false">                        <img src="' . BASE_URL . 'includes/captcha/images/refresh.gif" onclick="this.blur()"/>                    </a>';    } else {        $refresh = '<a href="" title="Cambiar im&aacute;gen" alt="Cambiar im&aacute;gen" onclick="document.getElementById(\'siimage\').src = \'' . BASE_URL . 'includes/captcha/securimage_show.php?rand1=' . $number1 . '&rand2=' . $number2 . '&sid=\' + Math.random(); return false">                        <img src="' . BASE_URL . 'includes/captcha/images/refresh.gif" onclick="this.blur()"/>                    </a>';    }    $input = '<input type="text" value="' . lang('Code') . '" id="' . $imput_id . '" name="code"  onfocus="clearInput(this.id, \'' . lang('Code') . '\')" onblur="restoreInput (this.id, \'' . lang('Code') . '\')">';    switch ($separator) {        case 'td':            $output = '<td class="captcha">' . $image . '</td><td>' . $input . '</td><td>' . $refresh . '</td>';            break;        default:            $output = $image . $separator . $refresh . $separator . $input;            break;    }    return $output;}function checkCaptcha($code) {    include 'captcha/securimage.php';    $img = new Securimage();    $valid = $img->check($code);    return $valid;}function sendEmail($to, $from, $subject_mail, $html, $text = '', $attachments = array()) {    require_once BASE_PATH . 'includes/mailer/class.phpmailer.php';    $php_mailer = new PHPMailer(true);    $ok = false;    try {        $php_mailer->ClearAddresses();        $php_mailer->CharSet = 'UTF-8';        $php_mailer->IsSMTP();        $php_mailer->SMTPAuth = true;        $php_mailer->Host = MAIL_HOST;        $php_mailer->Username = MAIL_SEND_ACCOUNT;        $php_mailer->Password = MAIL_SEND_PASSWORD;        $php_mailer->From = MAIL_SEND_ACCOUNT;        $php_mailer->FromName = $from;        $php_mailer->AddAddress($to);        $php_mailer->Subject = $subject_mail;        if ($html) {            $php_mailer->Body = $html;            $php_mailer->AltBody = $text;            $php_mailer->IsHTML(true);        } else {            $php_mailer->Body = $html;        }        $php_mailer->WordWrap = 80;        if (count((array) $attachments) > 0) {            foreach ((array) $attachments as $attachment) {                $php_mailer->AddAttachment($attachment);            }        }        $ok = $php_mailer->Send();    } catch (phpmailerException $e) {        echo $e->errorMessage();    } catch (Exception $e) {        echo $e->getMessage();    }    return $ok;}function getCurrentUrl() {    $url = (!empty($_SERVER['HTTPS'])) ? "https://" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'] : "http://" . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];    return $url;}function error404() {    require_once BASE_PATH . '404.html';    die();}function customFileSize($file, $setup = null) {    $FZ = ($file && @is_file($file)) ? filesize($file) : NULL;    $FS = array("B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB");    if (!$setup && $setup !== 0) {        return number_format($FZ / pow(1024, $I = floor(log($FZ, 1024))), ($i >= 1) ? 2 : 0) . ' ' . $FS[$I];    } elseif ($setup == 'INT')        return number_format($FZ);    else        return number_format($FZ / pow(1024, $setup), ($setup >= 1) ? 2 : 0) . ' ' . $FS[$setup];}function orderMultiDimensionalArray($toOrderArray, $field, $inverse = false) {    $position = array();    $newRow = array();    foreach ((array) $toOrderArray as $key => $row) {        $position[$key] = $row[$field];        $newRow[$key] = $row;    }    if ($inverse) {        arsort($position);    } else {        asort($position);    }    $returnArray = array();    foreach ((array) $position as $key => $pos) {        $returnArray[] = $newRow[$key];    }    return $returnArray;}function ITR($string) {    $output = '<tr><td>' . $string . '</td></tr>';    return $output;}function getToken() {    return md5(microtime());}function strtourl($string) {//$string = utf8_encode($string);    $string = strtolower($string);    $string = trim($string);    $a = array("ã", "À", "Á", "Ä", "Â", "È", "É", "Ë", "Ê", "Ì", "Í", "Ï", "Î", "Ò", "Ó", "Ö", "Ô", "Ù", "Ú", "Ü", "Û", "á", "é", "í", "ó", "ú", "à", "è", "ì", "ò", "ù", "ä", "ë", "ï", "ö", "ü", "â", "ê", "î", "ô", "û", "ñ", "ç", " ", "/", "'", ")", ".", ",");    $b = array("a", "a", "a", "a", "a", "e", "e", "e", "e", "i", "i", "i", "i", "o", "o", "o", "o", "u", "u", "u", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "n", "c", "-", "-", "", "", "", "");    $string = str_replace($a, $b, $string);    $string = utf8_decode($string);    $string = preg_replace('#([^.a-z0-9]+)#i', '-', $string);//    $string = preg_replace('/[^a-z0-9-]/', '', $string);    return $string;}function putSpaces($count, $string) {    $spaces = '';    for ($index = 0; $index < $count; $index++) {        $spaces .= '&nbsp;&nbsp;&nbsp;';    }    return $spaces . $string;}function margin($count) {    $margin = 4;    for ($index = 0; $index < $count; $index++) {        $margin = $margin + 16;    }    return $margin;}function getMonthName($monthNumber) {    switch ($monthNumber) {        case 01:            $monthName = lang('ene');            break;        case 02:            $monthName = lang('feb');            break;        case 03:            $monthName = lang('mar');            break;        case 04:            $monthName = lang('abr');            break;        case 05:            $monthName = lang('may');            break;        case 06:            $monthName = lang('jun');            break;        case 07:            $monthName = lang('jul');            break;        case 08:            $monthName = lang('ago');            break;        case 09:            $monthName = lang('sep');            break;        case 10:            $monthName = lang('oct');            break;        case 11:            $monthName = lang('nov');            break;        case 12:            $monthName = lang('dic');            break;    }    return $monthName;}function makeOff($original_num, $discount_percent) {    return $original_num * ((100 - $discount_percent) / 100);}function implementTax($original_num, $tax_type) {    $tax = new Item_tax_percents();    if ($_SESSION['public_user']['userSendCountryFk'] < 1) {        $country = $GLOBALS['settings']['default_country'];    } else {        $country = $_SESSION['public_user']['userSendCountryFk'];    }    $rs = $tax->getAll('taxNumPercent', 'taxNumCountryFk = ' . $country . ' AND taxNumTypeFk = ' . EC($tax_type));    return $original_num * (($rs[0]['taxNumPercent'] / 100) + 1);}function getHourSelect($nom, $selected = false, $onchange = '', $slotMinutes = 30, $ini_hour = false) {    $start_hour = strtotime('00:00');    $finish_hour = $start_hour + (24 * 60 * 60);    if ($ini_hour) {        $start_hour = strtotime($ini_hour);    }    $thearray = array();    $hour = $start_hour;    while ($hour < $finish_hour) {        $thearray[date("H:i", $hour)] = date("H:i", $hour);        $hour = $hour + ($slotMinutes * 60);    }    return getSelectFromArray($thearray, $nom, $selected, $onchange);}function microseconds() {    list($usec, $sec) = explode(" ", microtime());    list($zero, $microsecs) = explode(".", $usec);    return $microsecs;}function insertDebugLog($text) {    if (FUNCTION_DEBUG) {        $date = date('H:i:s:') . microseconds() . ' => ';        $gestor = fopen(BASE_PATH . 'logs/debug_log.txt', 'a+');        fwrite($gestor, $date . $text . ";\n");        fclose($gestor);        if (SQL_DEBUG) {            $date = date('H:i:s:') . microseconds() . ' => ';            $gestor = fopen(BASE_PATH . 'logs/combined_log.txt', 'a+');            fwrite($gestor, "\n\n" . $date . $text . ";\n\n");            fclose($gestor);        }    }}function SQLMonitor($sql, $table) {    if (SQL_DEBUG) {        $date = date('H:i:s:') . microseconds() . ' => ' . $table . ' => ';        $gestor = fopen(BASE_PATH . 'logs/sql_log.txt', 'a+');        $sql = str_replace(array("\n", "\t", "\r", "  "), '', $sql);        fwrite($gestor, $date . $sql . ";\n");        fclose($gestor);        if (FUNCTION_DEBUG) {            $date = date('H:i:s:') . microseconds() . ' => ' . $table . ' => ';            $gestor = fopen(BASE_PATH . 'logs/combined_log.txt', 'a+');            $sql = str_replace(array("\n", "\t", "\r", "  "), '', $sql);            fwrite($gestor, $date . $sql . ";\n");            fclose($gestor);        }    }}function cleanDebugLog() {    if (FUNCTION_DEBUG) {        $gestor = fopen(BASE_PATH . 'logs/debug_log.txt', 'w+');        fclose($gestor);    }    if (SQL_DEBUG) {        $gestor = fopen(BASE_PATH . 'logs/sql_log.txt', 'w+');        fclose($gestor);    }    if (SQL_DEBUG && FUNCTION_DEBUG) {        $gestor = fopen(BASE_PATH . 'logs/combined_log.txt', 'w+');        fclose($gestor);    }}function zero_left($number, $n) {    return str_pad((int) $number, $n, "0", STR_PAD_LEFT);}function authorization() {    if (!$_SESSION['user_info']['userToken']) {        header("Location: " . BASE_URL . "index.php");    }}function common_js() {    $data = '<script> var base_url = ' . EC(BASE_URL) . '</script>';    $data .= '<script src="' . BASE_URL . 'js/jquery-2.1.1.js"></script>'            . '<script src="' . BASE_URL . 'js/jquery-ui.min.js"></script>'            . '<script src="' . BASE_URL . 'js/bootstrap.min.js"></script>'            . '<script src="' . BASE_URL . 'js/gallery/jquery.blueimp-gallery.min.js"></script>'            . '<script src="' . BASE_URL . 'js/gallery/bootstrap-image-gallery.min.js"></script>'            . '<script src="' . BASE_URL . 'js/functions.js"></script>';    return $data;}function getSelectFromArray($thearray, $name, $selected = false, $isEmpty = false, $onchange = false, $id = false, $class = FALSE, $disabled = FALSE, $multiple = false, $size = false, $addable = FALSE, $chosen = true) {    if ($multiple) {        $name .= '[]';    }    if (!$id) {        $id = $name;    }    $foo = '<select ';    if ($chosen) {        $foo .= 'data-rel="chosen"';    }    $foo .= ' class="' . $class . '" id="' . $id . '" name="' . $name . '"';    if ($onchange) {        $foo .= ' onchange="' . $onchange . '"';    }    if ($disabled) {        $foo.=' disabled ';    }    if ($multiple) {        $foo.=' multiple ';    }    if ($size) {        $foo.=' size="' . $size . '" ';    } else {        if ($multiple) {            $foo.=' size="' . count($thearray) . '" ';        }    }    $foo .= '>';    if ($isEmpty) {        if (is_numeric($isEmpty)) {            $foo .= '<option value="' . $isEmpty . '"';        } else {            $foo .= '<option value="NULL"';        }        if (!$selected) {            $foo .= ' selected';        }        $foo .= '>---------</option>';    }    if ($addable) {        $foo .= '<option value="-1">' . lang('insert_new') . '</option>';    }    foreach ((array) $thearray as $id => $value) {        $foo .= '<option value="' . $id . '"';        if (is_array($selected)) {            if (in_array($id, $selected)) {                $foo .= ' selected';            }        } else {            if ($id == $selected) {                $foo .= ' selected';            }        }        $foo .= '>' . $value . '</option>';    }    $foo .= '</select>';    return $foo;}